name: Build and Deploy WebGL and Documentation

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ['main']

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: production-${{ github.ref }}
  cancel-in-progress: true

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

jobs:
  build-webgl-app:
    name: Build WebGL App
    runs-on: ubuntu-latest
    steps:
    
      # Checkout (without LFS)
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Git LFS
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v4
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      # # Cache
      - uses: actions/cache@v4
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-

      # # Build
      - name: Build project
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: WebGL
          allowDirtyBuild: true
          buildMethod: ScriptBatch.OfficialBuild_WebGL
      
      
      # save build to temp_build_webgl
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: temp_build_webgl
          path: Builds/${{ vars.PROJECT_NAME }}-WebGL

  # #   strategy:
  # #     fail-fast: false
  # #   steps:
  # #     - uses: actions/checkout@v4
  # #     - uses: ./.github/actions/setvars
  # #     - uses: ./.github/actions/git-lfs-cache
  # #     - uses: ./.github/actions/unity-library-cache
  # #       with:
  # #         target_platform: WebGL

  # #     # Build the game deployment at build
  # #     - uses: game-ci/unity-builder@v4
  # #       with:
  # #         unityVersion: ${{ env.UNITY_VERSION }}
  # #         targetPlatform: WebGL
  # #         buildMethod: ScriptBatch.OfficialBuild_WebGL

  # #     # save build to temp_build_webgl
  # #     - name: Upload build artifact
  # #       uses: actions/upload-artifact@v4
  # #       with:
  # #         name: temp_build_webgl
  # #         path: Builds/${{ env.PROJECT_NAME }}-WebGL

  # # # Build the documentation
  # # build-docs:
  # #   name: DocFX build for website
  # #   runs-on: windows-latest # Required by DocFX
  # #   steps:
  # #     - uses: actions/checkout@v4
  # #     - uses: ./.github/actions/setvars
  # #     - uses: ./.github/actions/git-lfs-cache

  # #     - name: Install DocFX
  # #       run: choco install -y docfx

  # #     - name: Build Website
  # #       run: .\Documentation\build.cmd

  # #     # Upload build to temp_build_docs
  # #     - name: Upload build artifact
  # #       uses: actions/upload-artifact@v4
  # #       with:
  # #         name: temp_build_docs
  # #         path: _site

  # # Combine artifacts for website
  # combine-and-deploy-artifact:
  #   name: Combine and Deploy Artifact
  #   runs-on: ubuntu-latest
  #   needs: [build-webgl-app, build-docs]
  #   steps:
  #     # Download previous builds
  #     - name: Download WebGL Build
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: temp_build_webgl
  #         path: _site

  #     - name: Download Docs Build
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: temp_build_docs
  #         path: _site/docs

  #     - name: Upload Site Artifact
  #       uses: actions/upload-pages-artifact@v4
  #       with:
  #         name: github-pages

  # # Deploy job
  # deploy-combined-webgl:
  #   # Add a dependency to the build job
  #   needs: combine-and-deploy-artifact

  #   # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
  #   permissions:
  #     pages: write      # to deploy to Pages
  #     id-token: write   # to verify the deployment originates from an appropriate source

  #   # Deploy to the github-pages environment
  #   environment:
  #     name: github-pages
  #     url: ${{ steps.deployment.outputs.page_url }}

  #   # Specify runner + deployment step
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Deploy to GitHub Pages
  #       id: deployment
  #       uses: actions/deploy-pages@v4

  # # Cleanup the build artifacts
  # cleanup-build-artifacts:
  #   name: Cleanup the build artifacts after deploying site.
  #   runs-on: ubuntu-latest
  #   if: always()
  #   needs: [deploy-combined-webgl]

  #   steps:
  #     - name: Cleanup temp build artifacts
  #       uses: joutvhu/delete-artifact@v4
  #       with:
  #         name: |
  #           temp_build_webgl
  #           temp_build_docs
  #           github-pages
